AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Travel AI Platform API Functions

# Global Variables
Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    MemorySize: 256
    Environment:
      Variables:
        TRAVEL_PLANS_TABLE: TravelPlansBase
        MEDIA_BUCKET: !ImportValue TravelAI-MediaBucketName-Base
        FRONTEND_URL: 'http://localhost:3000'
        USER_POOL_ID: !ImportValue TravelAI-UserPoolId-Base
        OPENAI_API_KEY_PARAM: '/travel-ai/openai-api-key'

# Resource Definitions
Resources:
  # API Gateway
  TravelApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET, POST, PUT, DELETE, OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'http://localhost:3000'"
      Auth:
        ApiKeyRequired: false

  # OAuth Call Back Lambda
  AuthCallbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/auth/
      Handler: auth-callback.handler
      Environment:
        Variables:
          FRONTEND_URL: 'http://localhost:3000'
          USER_POOL_ID: !ImportValue TravelAI-UserPoolId-Base
      Policies:
        - AmazonCognitoReadOnly
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:InitiateAuth
                - cognito-idp:AdminInitiateAuth
              Resource: '*'
      Events:
        AuthCallback:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /auth/callback
            Method: get

  # Token Exchange Lambda
  AuthTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/auth/
      Handler: auth-token.handler
      Policies:
        - AmazonCognitoReadOnly
      Events:
        AuthToken:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /api/auth/token
            Method: get

  # Create Travel Plan Lambda
  CreateTravelPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/travel-plan/
      Handler: create.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: TravelPlansBase
        - SSMParameterReadPolicy:
            ParameterName: /travel-ai/openai-api-key
      Events:
        CreateTravelPlan:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /api/travel/plan
            Method: post

  # Get Travel Plan Lambda
  GetTravelPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/travel-plan/
      Handler: get.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: TravelPlansBase
        - SSMParameterReadPolicy:
            ParameterName: /travel-ai/openai-api-key
      Events:
        GetTravelPlan:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /api/travel/plan/{id}
            Method: get

  # List User Plans Lambda
  ListUserPlansFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/travel-plan/
      Handler: list.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: TravelPlansBase
        - SSMParameterReadPolicy:
            ParameterName: /travel-ai/openai-api-key
      Events:
        ListUserPlans:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /api/travel/user-plans
            Method: get

  # Share Travel Plan Lambda
  ShareTravelPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/travel-plan/
      Handler: share.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: TravelPlansBase
        - SSMParameterReadPolicy:
            ParameterName: /travel-ai/openai-api-key
      Events:
        ShareTravelPlan:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /api/travel/plan/{id}/share
            Method: post

  # Image Search Lambda
  ImageSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/image-search/
      Handler: search.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: TravelPlansBase
        - S3CrudPolicy:
            BucketName: !ImportValue TravelAI-MediaBucketName-Base
        - Statement:
            - Effect: Allow
              Action:
                - rekognition:DetectLabels
                - rekognition:RecognizeCelebrities
              Resource: '*'
        - SSMParameterReadPolicy:
            ParameterName: /travel-ai/openai-api-key
      Events:
        ImageSearch:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /api/travel/image-search
            Method: post

  # Update Travel Plan Lambda
  UpdateTravelPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/travel-plan/
      Handler: update.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: TravelPlansBase
        - SSMParameterReadPolicy:
            ParameterName: /travel-ai/openai-api-key
      Events:
        UpdateTravelPlan:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /api/travel/plan/{id}
            Method: put

  # MyPage Lambda 
  MyPageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/user/
      Handler: mypage.handler
      Policies:
        - AmazonCognitoReadOnly
      Events:
        MyPage:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /api/user/mypage
            Method: get

  # User Profile Lambda
  UserProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/user/
      Handler: profile.handler
      Policies:
        - AmazonCognitoReadOnly
      Events:
        UserProfile:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /api/user/profile
            Method: put

# Output Definitions
Outputs:
  TravelApi:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${TravelApi}.execute-api.${AWS::Region}.amazonaws.com/prod/' 