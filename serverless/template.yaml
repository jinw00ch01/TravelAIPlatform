AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Travel AI Platform Serverless Backend

# 전역 변수 정의
Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    MemorySize: 256
    Environment:
      Variables:
        TRAVEL_PLANS_TABLE: !Ref TravelPlansTable
        MEDIA_BUCKET: !Ref MediaBucket
        OPENAI_API_KEY: '{{resolve:ssm:/travel-ai/openai-api-key:1}}'
        FRONTEND_URL: 'http://localhost:3000'

# 리소스 정의
Resources:
  # API Gateway
  TravelApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET, POST, PUT, DELETE, OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: 
              Fn::GetAtt: 
                - UserPool
                - Arn

  # Cognito 사용자 풀
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: TravelAIPlatformUserPool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      MfaConfiguration: 'OFF'
      EmailVerificationSubject: '여행 AI 플랫폼 - 이메일 인증'
      EmailVerificationMessage: '인증 코드: {####}'
      SmsVerificationMessage: '인증 코드: {####}'
      SmsAuthenticationMessage: '인증 코드: {####}'
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: '임시 비밀번호: {####}'
          EmailSubject: '여행 AI 플랫폼 - 임시 비밀번호'
          SMSMessage: '임시 비밀번호: {####}'
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: '인증 코드: {####}'
        EmailSubject: '여행 AI 플랫폼 - 이메일 인증'
        SmsMessage: '인증 코드: {####}'
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: picture
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
          - Name: verified_phone_number
            Priority: 2

  # Cognito 사용자 풀 도메인
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: travel-ai-platform
      UserPoolId: !Ref UserPool

  # Cognito 앱 클라이언트
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: TravelAIWebApp  
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
        - Google
        - Facebook
      CallbackURLs:
        - 'https://your-frontend-domain.com/callback'
        - 'http://localhost:3000/callback'
      LogoutURLs:
        - 'https://your-frontend-domain.com'
        - 'http://localhost:3000'
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH

  # Google 자격 증명 공급자
  GoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: Google
      ProviderType: Google
      ProviderDetails:
        client_id: '{{resolve:ssm:/travel-ai/google-client-id:1}}'
        client_secret: '{{resolve:ssm:/travel-ai/google-client-secret:1}}'
        authorize_scopes: "email profile openid"
      AttributeMapping:
        email: email
        name: name
        picture: picture

  # Facebook 자격 증명 공급자
  FacebookIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: Facebook
      ProviderType: Facebook
      ProviderDetails:
        client_id: '{{resolve:ssm:/travel-ai/facebook-app-id:1}}'
        client_secret: '{{resolve:ssm:/travel-ai/facebook-app-secret:1}}'
        authorize_scopes: "email public_profile"
      AttributeMapping:
        email: email
        name: name
        picture: picture

  # 인증 관련 Lambda 함수
  
  # 사용자 등록 후 처리 Lambda
  PostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/auth/
      Handler: post-confirmation.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TravelPlansTable
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
      Events:
        CognitoTrigger:
          Type: Cognito
          Properties:
            UserPool: !Ref UserPool
            Trigger: PostConfirmation

  # DynamoDB 테이블
  TravelPlansTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TravelPlans
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # S3 버킷
  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000

  # Media Bucket 정책
  MediaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MediaBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource: !Sub '${MediaBucket.Arn}/*'

  # Lambda 함수 정의
  
  # 여행 계획 생성 Lambda
  CreateTravelPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/travel-plan/
      Handler: create.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TravelPlansTable
      Events:
        CreateTravelPlan:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /api/travel/plan
            Method: post

  # 여행 계획 조회 Lambda
  GetTravelPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/travel-plan/
      Handler: get.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TravelPlansTable
      Events:
        GetTravelPlan:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /api/travel/plan/{id}
            Method: get

  # 사용자 여행 계획 목록 Lambda
  ListUserPlansFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/travel-plan/
      Handler: list.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TravelPlansTable
      Events:
        ListUserPlans:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /api/travel/user-plans
            Method: get

  # 여행 계획 공유 Lambda
  ShareTravelPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/travel-plan/
      Handler: share.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TravelPlansTable
      Events:
        ShareTravelPlan:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /api/travel/plan/{id}/share
            Method: post

  # 이미지 검색 Lambda
  ImageSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/image-search/
      Handler: search.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TravelPlansTable
        - S3CrudPolicy:
            BucketName: !Ref MediaBucket
        - Statement:
            - Effect: Allow
              Action:
                - rekognition:DetectLabels
                - rekognition:RecognizeCelebrities
              Resource: '*'
      Events:
        ImageSearch:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /api/travel/image-search
            Method: post

  # 여행 계획 업데이트 Lambda
  UpdateTravelPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/travel-plan/
      Handler: update.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TravelPlansTable
      Events:
        UpdateTravelPlan:
          Type: Api
          Properties:
            RestApiId: !Ref TravelApi
            Path: /api/travel/plan/{id}
            Method: put

# 출력 정의
Outputs:
  TravelApi:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${TravelApi}.execute-api.${AWS::Region}.amazonaws.com/prod/'
  
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
  
  MediaBucketName:
    Description: S3 Bucket for storing media files
    Value: !Ref MediaBucket
    
  UserPoolDomain:
    Description: Cognito User Pool Domain
    Value: !Sub 'https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com' 