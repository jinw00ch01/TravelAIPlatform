AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Travel AI Platform Serverless Backend
Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    MemorySize: 256
    Environment:
      Variables:
        TRAVEL_PLANS_TABLE:
          Ref: TravelPlansTable
        MEDIA_BUCKET:
          Ref: MediaBucket
        OPENAI_API_KEY: '{{resolve:ssm:/travel-ai/openai-api-key:1}}'
        FRONTEND_URL: http://localhost:3000
Resources:
  TravelApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: '''GET, POST, PUT, DELETE, OPTIONS'''
        AllowHeaders: '''Content-Type,Authorization'''
        AllowOrigin: '''*'''
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - UserPool
              - Arn
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: TravelAiUserPool
      AutoVerifiedAttributes:
      - email
      UsernameAttributes:
      - email
      MfaConfiguration: 'OFF'
      EmailVerificationSubject: "\uC5EC\uD589 AI \uD50C\uB7AB\uD3FC - \uC774\uBA54\
        \uC77C \uC778\uC99D"
      EmailVerificationMessage: "\uC778\uC99D \uCF54\uB4DC: {####}"
      SmsVerificationMessage: "\uC778\uC99D \uCF54\uB4DC: {####}"
      SmsAuthenticationMessage: "\uC778\uC99D \uCF54\uB4DC: {####}"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: "\uC784\uC2DC \uBE44\uBC00\uBC88\uD638: {####}"
          EmailSubject: "\uC5EC\uD589 AI \uD50C\uB7AB\uD3FC - \uC784\uC2DC \uBE44\uBC00\
            \uBC88\uD638"
          SMSMessage: "\uC784\uC2DC \uBE44\uBC00\uBC88\uD638: {####}"
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: "\uC778\uC99D \uCF54\uB4DC: {####}"
        EmailSubject: "\uC5EC\uD589 AI \uD50C\uB7AB\uD3FC - \uC774\uBA54\uC77C \uC778\
          \uC99D"
        SmsMessage: "\uC778\uC99D \uCF54\uB4DC: {####}"
      Schema:
      - Name: name
        AttributeDataType: String
        Mutable: true
        Required: true
      - Name: email
        AttributeDataType: String
        Mutable: false
        Required: true
      - Name: picture
        AttributeDataType: String
        Mutable: true
        Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      AccountRecoverySetting:
        RecoveryMechanisms:
        - Name: verified_email
          Priority: 1
        - Name: verified_phone_number
          Priority: 2
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: travel-ai-platform
      UserPoolId:
        Ref: UserPool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: UserPool
      ClientName: travel-ai-app-client
      GenerateSecret: false
      SupportedIdentityProviders:
      - COGNITO
      - Google
      - Facebook
      CallbackURLs:
      - https://your-frontend-domain.com/callback
      - http://localhost:3000/callback
      LogoutURLs:
      - https://your-frontend-domain.com
      - http://localhost:3000
      AllowedOAuthFlows:
      - code
      - implicit
      AllowedOAuthScopes:
      - phone
      - email
      - openid
      - profile
      AllowedOAuthFlowsUserPoolClient: true
      ExplicitAuthFlows:
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_CUSTOM_AUTH
  GoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId:
        Ref: UserPool
      ProviderName: Google
      ProviderType: Google
      ProviderDetails:
        client_id: '{{resolve:ssm:/travel-ai/google-client-id:1}}'
        client_secret: '{{resolve:ssm:/travel-ai/google-client-secret:1}}'
        authorize_scopes: email profile openid
      AttributeMapping:
        email: email
        name: name
        picture: picture
  FacebookIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId:
        Ref: UserPool
      ProviderName: Facebook
      ProviderType: Facebook
      ProviderDetails:
        client_id: '{{resolve:ssm:/travel-ai/facebook-app-id:1}}'
        client_secret: '{{resolve:ssm:/travel-ai/facebook-app-secret:1}}'
        authorize_scopes: email public_profile
      AttributeMapping:
        email: email
        name: name
        picture: picture
  PostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: PostConfirmationFunction
      Handler: post-confirmation.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TravelPlansTable
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: UserPool
      Events:
        CognitoTrigger:
          Type: Cognito
          Properties:
            UserPool:
              Ref: UserPool
            Trigger: PostConfirmation
    Metadata:
      SamResourceId: PostConfirmationFunction
  TravelPlansTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TravelPlans
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: userId
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: UserIdIndex
        KeySchema:
        - AttributeName: userId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - POST
          - DELETE
          - HEAD
          AllowedOrigins:
          - '*'
          MaxAge: 3000
  MediaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: MediaBucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal: '*'
          Action:
          - s3:GetObject
          Resource:
            Fn::Sub: ${MediaBucket.Arn}/*
  CreateTravelPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CreateTravelPlanFunction
      Handler: create.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TravelPlansTable
      Events:
        CreateTravelPlan:
          Type: Api
          Properties:
            RestApiId:
              Ref: TravelApi
            Path: /api/travel/plan
            Method: post
    Metadata:
      SamResourceId: CreateTravelPlanFunction
  GetTravelPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetTravelPlanFunction
      Handler: get.handler
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: TravelPlansTable
      Events:
        GetTravelPlan:
          Type: Api
          Properties:
            RestApiId:
              Ref: TravelApi
            Path: /api/travel/plan/{id}
            Method: get
    Metadata:
      SamResourceId: GetTravelPlanFunction
  ListUserPlansFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ListUserPlansFunction
      Handler: list.handler
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: TravelPlansTable
      Events:
        ListUserPlans:
          Type: Api
          Properties:
            RestApiId:
              Ref: TravelApi
            Path: /api/travel/user-plans
            Method: get
    Metadata:
      SamResourceId: ListUserPlansFunction
  ShareTravelPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ShareTravelPlanFunction
      Handler: share.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TravelPlansTable
      Events:
        ShareTravelPlan:
          Type: Api
          Properties:
            RestApiId:
              Ref: TravelApi
            Path: /api/travel/plan/{id}/share
            Method: post
    Metadata:
      SamResourceId: ShareTravelPlanFunction
  ImageSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ImageSearchFunction
      Handler: search.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TravelPlansTable
      - S3CrudPolicy:
          BucketName:
            Ref: MediaBucket
      - Statement:
        - Effect: Allow
          Action:
          - rekognition:DetectLabels
          - rekognition:RecognizeCelebrities
          Resource: '*'
      Events:
        ImageSearch:
          Type: Api
          Properties:
            RestApiId:
              Ref: TravelApi
            Path: /api/travel/image-search
            Method: post
    Metadata:
      SamResourceId: ImageSearchFunction
  UpdateTravelPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UpdateTravelPlanFunction
      Handler: update.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TravelPlansTable
      Events:
        UpdateTravelPlan:
          Type: Api
          Properties:
            RestApiId:
              Ref: TravelApi
            Path: /api/travel/plan/{id}
            Method: put
    Metadata:
      SamResourceId: UpdateTravelPlanFunction
Outputs:
  TravelApi:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${TravelApi}.execute-api.${AWS::Region}.amazonaws.com/prod/
  UserPoolId:
    Description: Cognito User Pool ID
    Value:
      Ref: UserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value:
      Ref: UserPoolClient
  MediaBucketName:
    Description: S3 Bucket for storing media files
    Value:
      Ref: MediaBucket
  UserPoolDomain:
    Description: Cognito User Pool Domain
    Value:
      Fn::Sub: https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
